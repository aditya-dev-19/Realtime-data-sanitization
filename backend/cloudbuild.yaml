steps:
# STEP 1: Build the Docker image
# This step no longer needs to worry about LFS files.
# It builds the image using the Dockerfile in the 'backend' directory.
- name: 'gcr.io/cloud-builders/docker'
  dir: 'backend'
  args: ['build', '-t', 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA', '.']

# STEP 2: Push the image to Google Container Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA']

# STEP 3: Deploy the new image to Cloud Run
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  entrypoint: gcloud
  args:
    - 'run'
    - 'deploy'
    - 'cybersecurity-api-service'   # Your Cloud Run service name
    - '--image'
    - 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA'
    - '--region'
    - 'us-central1'                 # Your service region
    - '--platform'
    - 'managed'
    - '--allow-unauthenticated'
    - '--memory=4Gi'                # Allocate more memory for loading models
    - '--timeout=900'               # Increase timeout to 15 minutes (900 seconds)
    - '--cpu-boost'                 # Enable CPU boost for faster startup
    - '--service-account=firebase-admin-sa@$PROJECT_ID.iam.gserviceaccount.com'
    # Environment variables - Added KMS configuration
    - '--set-env-vars=GOOGLE_CLOUD_PROJECT=$PROJECT_ID,GCS_BUCKET=store-aajs-123,KMS_PROJECT=$PROJECT_ID,KMS_LOCATION=global,KMS_KEY_RING=my-key-ring,KMS_CRYPTO_KEY=file-wrap-key,FIRESTORE_COLLECTION=file_storage_metadata'

images:
  - 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA'

options:
  logging: CLOUD_LOGGING_ONLY