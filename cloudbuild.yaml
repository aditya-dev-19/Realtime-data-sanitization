steps:
  # STEP 1: Log in to Git and pull LFS files
  - name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    secretEnv: ['GITHUB_TOKEN']
    args:
      - '-c'
      - |
        # Use the token from Secret Manager to authenticate with GitHub
        git config --global credential.helper 'store --file=/tmp/git-credentials'
        echo "https://x-access-token:$GITHUB_TOKEN@github.com" > /tmp/git-credentials
        
        # Now install git-lfs and pull the large files
        apt-get update && apt-get install -y git-lfs
        git lfs pull

  # Step 2: Build the Docker image using the files (including LFS) from the previous step
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA', '.']

  # Step 3: Push the image to Google Container Registry
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA']

  # Step 4: Deploy the new image to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'cybersecurity-api-service'
      - '--image'
      - 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA'
      - '--region'
      - 'us-central1'
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'


images:
  - 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA'

options:
  logging: CLOUD_LOGGING_ONLY

# This block tells Cloud Build to fetch our secret
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/github-token/versions/latest
    env: 'GITHUB_TOKEN'