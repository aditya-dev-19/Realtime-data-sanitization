steps:
  # STEP 1: Modified to read the token from a secret file
  - name: 'gcr.io/cloud-builders/git'
    entrypoint: 'bash'
    args:
      - '-c'
      - |
        # Read the token from the file mounted by Secret Manager
        # and configure Git to use it for authentication.
        git config --global credential.helper 'store --file=/tmp/git-credentials'
        echo "https://x-access-token:$(cat /secrets/github_token_file)@github.com" > /tmp/git-credentials
        
        # Now, install git-lfs and pull the large files
        apt-get update && apt-get install -y git-lfs
        git lfs pull

  # STEP 2: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA', '.']

  # STEP 3: Push the image
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA']

  # STEP 4: Deploy to Cloud Run
  - name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
    entrypoint: gcloud
    args:
      - 'run'
      - 'deploy'
      - 'YOUR_SERVICE_NAME'   # <-- Replace with your service name
      - '--image'
      - 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA'
      - '--region'
      - 'YOUR_REGION'         # <-- Replace with your service region
      - '--platform'
      - 'managed'
      - '--allow-unauthenticated'

images:
  - 'gcr.io/$PROJECT_ID/realtime-data-sanitization:$COMMIT_SHA'

options:
  logging: CLOUD_LOGGING_ONLY

# This block tells Cloud Build to mount our secret as a file
availableSecrets:
  secretManager:
  - versionName: projects/$PROJECT_ID/secrets/github-token/versions/latest
    fileName: '/secrets/github_token_file'